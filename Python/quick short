def quick_sort(arr):
    # Base case: If the array has 0 or 1 element, it's already sorted
    if len(arr) <= 1:
        return arr

    # Recursive case: Partitioning the array and sorting the subarrays
    pivot = arr[len(arr) // 2]  # Choose pivot as the middle element
    left = [x for x in arr if x < pivot]  # Elements less than pivot
    middle = [x for x in arr if x == pivot]  # Elements equal to pivot
    right = [x for x in arr if x > pivot]  # Elements greater than pivot

    # Recursively apply quick_sort to the left and right parts
    return quick_sort(left) + middle + quick_sort(right)

def main():
    # Example usage
    try:
        # Input: A list of numbers to sort
        arr = [10, 5, 2, 3, 7, 6, 4]
        print("Original array:", arr)
        sorted_arr = quick_sort(arr)
        print("Sorted array:", sorted_arr)
    except Exception as e:
        print("An error occurred:", e)

if __name__ == "__main__":
    main()
